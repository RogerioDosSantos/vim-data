" Updated how to embed images"
" Type :so % to refresh .vimrc after making changes
" Type :PluginInstall to update
"
"### TODO ###

""" Plugins to evaluate
" Plug 'Valloric/YouCompleteMe'
" Plug 'junegunn/vim-easy-align'

" #### Plugin installation ####

if &compatible
  set nocompatible
end

call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized' "Text colors for C++

Plug 'bling/vim-airline' "Status bar
Plug 'vim-airline/vim-airline-themes' "Status bar Themes

Plug 'tpope/vim-fugitive' "Git wrapper

Plug 'christoomey/vim-tmux-navigator' "TMUX - Allow navigate among TMUX windows and vim
Plug 'christoomey/vim-tmux-runner' "TMUX - Allow run commands on TMUX

Plug 'christoomey/vim-run-interactive' "Run command into an interative shell

Plug 'ctrlpvim/ctrlp.vim' "Search filesystem with ctrl+p

Plug 'jiangmiao/auto-pairs' "MANY features, but mostly closes ([{' etc
Plug 'vim-scripts/HTML-AutoCloseTag' "close tags after >
Plug 'tpope/vim-surround' "easily surround things...just read docs for info

Plug 'vim-scripts/tComment' "Comment easily with gcc

Plug 'tpope/vim-repeat' "allow plugins to utilize . command

Plug 'vim-scripts/matchit.zip' " % also matches HTML tags / words / etc

Plug 'duff/vim-scratch' "Open a throwaway scratch buffer

Plug 'rking/ag.vim' " Code Tagging and Navigation

Plug 'vimwiki/vimwiki' " Diary, notes, whatever. It's amazing
Plug 'mattn/calendar-vim' "Calendar for VimWiki

Plug 'Shougo/neocomplete' "Complete with cache
Plug 'Shougo/neosnippet' "Snipets
Plug 'Shougo/neosnippet-snippets' "Snippets templates

Plug 'rhysd/vim-clang-format' "Format with Clang
Plug 'osyo-manga/vim-marching' "Complete with Clang

"Ascyncronous execution library
Plug 'Shougo/vimproc' , {
  \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }

" TODO(Roger) - Verify what this plugin does.
Plug 'osyo-manga/vim-reunions'
" Plug 'osyo-manga/vim-snowdrop'

" Pull 'thinca/vim-quickrun'

Plug 'scrooloose/syntastic' "Syntax Highlighting

Plug 'vim-scripts/DoxygenToolkit.vim' "Code Documentation

" Plug 'vim-scripts/Conque-GDB' "C++ debugging

call plug#end()


"#### Plugins Configurations ####

"Solarized (Configuration)
syntax enable "Turn on the vim syntax highlight
set t_Co=256 "Set the color supported to be 256. By default it is 16
set background=dark "Set the background to be black
colorscheme solarized "Define the solirized as the default color schema
"let g:airline_powerline_fonts = 1 " Allow powerline symbols to show up

" Fugitive (Mapping Keys)
nnoremap <silent><leader>gs :Gstatus<cr> " Git Status
nnoremap <silent><leader>gd :Gdiff<cr> " Git Diff (Non commit items vs Non added items)
nnoremap <silent><leader>gdh :Gdiff origin/HEAD<cr> " Git Diff origin / HEAD (Commit items vs Non Commit items)
nnoremap <silent><leader>gdm :Gdiff origin/master<cr> " Git Diff origin / master (Commit items vs Server)
nnoremap <silent><leader>gc :Gcommit<cr> " Git Commit
nnoremap <silent><leader>gp :Gpush<cr> " Git Push
nnoremap <silent><leader>gpu :Gpull<cr> " Git Pull
nnoremap <silent><leader>gb :Gblame<cr> " Git Brame (Verify the history of the file)
nnoremap <silent><leader>gr :Gread<cr> " Git checkout <file name> (You can execute undo before saving)
nnoremap <silent><leader>glo :Glog -10<cr>:copen<cr> " Load the 10 last log of a files into the buffer and display it
nnoremap <silent><leader>gla :Glog<cr>:copen<cr> " Load the all log of a files into the buffer and display it
nnoremap <silent><leader>gle :Gedit<cr> " Return to the current file being edited.

" TMUX Navigator (Allow moving around between Tmux windows)
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 1
nnoremap <silent><C-h> :TmuxNavigateLeft<cr>
nnoremap <silent><C-j> :TmuxNavigateDown<cr>
nnoremap <silent><C-k> :TmuxNavigateUp<cr>
nnoremap <silent><C-l> :TmuxNavigateRight<cr>

" TMUX Runner (Control from Vim)
nnoremap <silent><leader>to :VtrOpenRunner<cr>
nnoremap <silent><leader>te :VtrClearRunner<cr>
nnoremap <silent><leader>tk :VtrKillRunner<cr>
nnoremap <silent><leader>td :VtrDetachRunner<cr>
nnoremap <silent><leader>tc :VtrFlushCommand<cr>:VtrSendCommandToRunner<cr>
nnoremap <silent><leader>tb :w<cr>:VtrFlushCommand<cr>:VtrSendCommandToRunner ./build_linux_debug.sh<cr>
nnoremap <silent><leader>tl :VtrSendLinesToRunner<cr>
nnoremap <silent><leader>tf :VtrSendFile<cr>

" TMUX Runner (Copy and Paste to/from buffer)
" vmap <leader>y :w! ~/.vimbuffer<CR>
" nmap <leader>y :.w! ~/.vimbuffer<CR>
" map <leader>p :r ~/.vimbuffer<CR>"

" TMUX Runner (Open a tmux pane with Node)
"nnoremap <leader>node :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'node'}<cr>

" Ctrl-P (Use The Silver Searcher https://github.com/ggreer/the_silver_searcher)
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_working_path_mode = 'r'

  " ag is fast enough that CtrlP doesn't need to cache
  "let g:ctrlp_use_caching = 0
endif

" VimWiki ( Set Vim Wiki directory and format )
let g:vimwiki_list = [{
  \ 'path': '$HOME/wiki/wiki',
  \ 'template_path': '$HOME/wiki/wiki/template',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]

" VimWiki (Toggle Calendar)
function! ToggleCalendar()
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction

" VimWiki (Basic Configurations)
filetype plugin on
syntax on

" VimWiki (Key mapping)
:autocmd FileType vimwiki nnoremap <silent><leader>wc :call ToggleCalendar()<CR>
:autocmd FileType vimwiki nnoremap <silent><leader>wl :VimwikiDiaryGenerateLinks<CR>
:autocmd FileType vimwiki nnoremap <silent><leader>wp :Vimwiki2HTML<cr> " Publish current VimWiki document to HTML
:autocmd FileType vimwiki nnoremap <silent><leader>wpa :VimwikiAll2HTML<cr> " Publish all VimWiki document to HTML
:autocmd FileType vimwiki nnoremap <leader>ws :VWS 


" NoeComplete (Completition configuration)

let g:acp_enableAtStartup = 0 " Disable AutoComplPop.
let g:neocomplete#enable_at_startup = 1 " Use neocomplete.
let g:neocomplete#enable_smart_case = 1 " Use smartcase.
let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*' "Define buffer pattern

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
  \ }

" NoeComplete (Define keyword)
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" NeoComplete (Plugin key-mappings)
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" NeoComplete (Recommended key-mappings)
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction

" NeoComplete (<TAB>: completion)
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" NeoComplete (<C-h>, <BS>: close popup and delete backword char)
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" NeoComplete (Enable omni completion)
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" NeoComplete (Enable heavy omni completion)
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" NeoSnippets (Configuration)

" NeoSnippets (Plugin key-mappings)
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" NeoSnippets (SuperTab like snippets behavior)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" NeoSnippets (For conceal markers)
if has('conceal')
  set conceallevel=2 
  " set concealcursor=niv "The concealcursor enter in conflict with VimWiki Plugin.
endif"

" :neosnippet#snippets_directory

" Vim Clang Format (Configuration)

let g:clang_format#command = "/usr/bin/clang-format-3.8" "Inform where Clang Format executable is.
let g:clang_format#code_style = "google" "Inform the code style to be used.
" let g:clang_format#detect_style_file = 1 "vim-clang-format automatically detects the style file like .clang-format
let g:clang_format#style_options = {
      \"AccessModifierOffset" : "-4",
      \"AlignAfterOpenBracket" : "DontAlign",
      \"AllowShortFunctionsOnASingleLine" : "None",
      \"AllowShortIfStatementsOnASingleLine" : "false",
      \"AllowShortLoopsOnASingleLine" : "false",
      \"BreakBeforeBraces" : "Allman",
      \"BreakConstructorInitializersBeforeComma" : "true",
      \"ColumnLimit" : "150",
      \"ConstructorInitializerAllOnOneLineOrOnePerLine" : "false",
      \"IndentCaseLabels" : "false",
      \"IndentWidth" : "4",
      \"MacroBlockBegin" : "'DEFINE_ENUM'",
      \"MacroBlockEnd" : "'END_ENUM'",
      \"NamespaceIndentation" : "All",
      \"ObjCBlockIndentWidth" : "4",
      \"DerivePointerAlignment" : "false",
      \"PointerAlignment" : "Left",
      \"TabWidth" : "4"
   \}

" Original configuration.
    " \ "BreakBeforeBraces": "Allman",
    " \ "AllowShortFunctionsOnASingleLine" : "false",
    " \ "AllowShortIfStatementsOnASingleLine" : "false",
    " \ "AllowShortLoopsOnASingleLine" : "false",
    " \ "BreakConstructorInitializersBeforeComma" : "true",
    " \ "ColumnLimit" : "120",
    " \ "NamespaceIndentation" : "All"
  
noremap <silent><leader>f :ClangFormat<cr> " Format Using ClangFormat

" VimMarching (Configuration)

let g:marching_clang_command = "/usr/bin/clang" "Inform where Clang executable is.

let g:marching#clang_command#options = {
  \ "cpp" : "-std=gnu++1y"
  \}

" Add include directory here that should be used intellisense is used
let g:marching_include_paths = [
      \ "/usr/local/include",
      \ "~/leel/leel-third-party/boost",
      \ "~/third-party/boost1.55",
      \ "~/third-party/rapidjson/include"
  \]

let g:marching_enable_neocomplete = 1

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp =
    \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

set updatetime=200
imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)
imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)

" " VimSnowdrop (Configuration)
" " set libclang directory path
" let g:snowdrop#libclang_directory = "/usr/lib/i386-linux-gnu/libclang-3.5.so.1"
"
" " set include directory path.
" let g:snowdrop#include_paths = {
"   \   "cpp" : [
"         \ "/usr/local/include",
"         \ "~/leel/leel-third-party/boost"
"   \   ]
"   \}
"
" " set clang command options.
" let g:snowdrop#command_options = {
"   \   "cpp" : "-std=c++1y"
"   \}
"

" Syntastic (Configuration)
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_clang_check_config_file = ".syntastic_cpp_config"
" let g:syntastic_cpp_cpplint_exec = 'cpplint'
let g:syntastic_cpp_clang_check_exec = '/usr/bin/clang-check-3.8'
" let g:syntastic_cpp_cpplint_exec = ''
let g:syntastic_cpp_cppcheck_exec = '/usr/bin/cppcheck'
let g:syntastic_cpp_cpplint_exec = '~/.linux/cpplint/cpplint.py'
let g:syntastic_cpp_cpplint_args = '--filter=-whitespace/braces,-whitespace/parens $(ItemPath)'
let g:syntastic_mode_map = {
  \ "mode" : "passive",
        \ "active_filetypes" : [],
        \ "passive_filetypes" : [] 
        \}

" Syntastic (Mapping Keys)
nnoremap <silent><leader>ba :w<cr>:SyntasticCheck gcc clang_check cppcheck cpplint<cr> " Check the current file
nnoremap <silent><leader>bc :w<cr>:SyntasticCheck clang_check<cr> " Check the current file
nnoremap <silent><leader>bg :w<cr>:SyntasticCheck gcc<cr> " Check the current file
nnoremap <silent><leader>bp :w<cr>:SyntasticCheck cppcheck<cr> " Check the current file
nnoremap <silent><leader>bl :w<cr>:SyntasticCheck cpplint<cr> " Check the current file

" Doxigen ( Configuration )
" set spell spelllang=en_us
let g:load_doxygen_syntax=1
let g:DoxygenToolkit_briefTag_pre="@Desc "
let g:DoxygenToolkit_paramTag_pre="@Param "
let g:DoxygenToolkit_paramTag_post=" - \<enter>*"
let g:DoxygenToolkit_returnTag="@Return "
let g:DoxygenToolkit_blockHeader=""
let g:DoxygenToolkit_blockFooter=""
let g:DoxygenToolkit_authorName="Roger Santos"
let g:DoxygenToolkit_licenseTag="This is a part of the LeeL Systems products \nCopyright (C) 2016 LeeL Systems \nAll rights reserved."  

nnoremap <silent>gd :Dox<cr> 
nnoremap <silent>gl gg :DoxLic<cr> " Document license.
nnoremap <silent>gs :set spell!<cr> " Toggle document spell check

" Ag (Configuration)
nnoremap <silent>\\ :Ag \(<c-r>=expand("<cword>")<cr>\)<cr>
" vnoremap <silent>\\ y :Ag \(<c-r>"<cr>\)
